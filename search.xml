<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>关系链上的并查集</title>
      <link href="/2025/09/11/%E5%85%B3%E7%B3%BB%E9%93%BE%E4%B8%8A%E7%9A%84%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2025/09/11/%E5%85%B3%E7%B3%BB%E9%93%BE%E4%B8%8A%E7%9A%84%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="一、题目引入"><a href="#一、题目引入" class="headerlink" title="一、题目引入"></a>一、题目引入</h2><p>最近做了一道很优美的使用并查集解决的问题：<a href="https://ac.nowcoder.com/acm/problem/16884">https://ac.nowcoder.com/acm/problem/16884</a> 【2001NOI 食物链】</p><p>简要概括就是一共有A、B、C三种动物。A吃B，B吃C，C吃A。动物间有两种关系：</p><ul><li>“1 X Y”，表示X和Y是同类</li><li>“2 X Y”，表示X吃Y。</li></ul><p>现在给出k个关系，问这些关系中哪些是假的（与已有的关系冲突）</p><hr><p>这是一道很经典的并查集问题，但是与一般的并查集题目不同的是，此题的集合可以选择构建一串逻辑自洽的关系链。</p><span id="more"></span><p>在解决这道题目之前，先来回顾一下两种基本的并查集操作：</p><ol><li>合并：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    pa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);  <span class="comment">//pa数组存储父亲节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>查询（+路径压缩）：<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pa[x] == x ? x : pa[x] = <span class="built_in">find</span>(pa[x]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>此题可以用带权并查集解决，两点之间的距离代表着两者关系。经过三条边即一个A -&gt; B -&gt; C -&gt; A的循环，相当于是属于同一个物种。不过本蒟蒻并不是很会带权并查集，一开始用这个方法一直没做对这道题（🍐）。后来看了题解发现一个让我眼前一亮的做法，遂记录在此。</p><hr><p>正篇：</p><ol><li><p><strong>思路大意</strong></p><ul><li><p>将原先存储父亲节点的pa数组开三倍大。a[1]<del>a[n] 表示 i 为A动物的情况，a[n+1]</del>a[2n] 表示 i 为B动物的情况， a[2n+1]~a[3n] 表示 i 为C动物的情况。</p><table><thead><tr><th>i</th><th>1</th><th>2</th><th>3</th><th>……</th><th>n</th></tr></thead><tbody><tr><td>A</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>B</td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>C</td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><p>这样 i 对应的一竖列元素可以看作 i 号分别是A、B、C动物时的父亲节点（根节点的父亲就是自己）</p></li><li><p>由于有三个物种，第i个动物可能是A、B、C中任意一种（后续我们分别用iA，iB，iC表示）。在构建关系链的时候三种情况都要考虑，因此A、B、C都会延伸出一条链，一共三条链。若把多个竖列的三种情况都连接起来，那么这三条链记录着目前三种可能的关系链。每条关系链维护的是不同编号的动物之间的关系。</p></li><li><p>&#x3D;&#x3D;举例&#x3D;&#x3D; 用“–”表示逻辑上相连，XA–YA，XB–YB，XC–YC代表X与Y属于同类。XA–YB，XB–YC，XC–YA代表X吃Y。</p></li></ul></li><li><p><strong>如何判断一个关系的正确性？</strong></p><ol><li>输入是“1 X Y”</li></ol><ul><li>如果X和Y已经有关系了，那么XA肯定会与YA、YB或YC中的一个相连。<br>（由于每次构建关系链的时候我们是三种情况（XA、XB、XC）都考虑的，因此只用考虑XA就行）</li><li>如果X和Y没有关系，则XA不会与YA、YB或YC中任意一个相连。这时候新输入的关系肯定是正确的<br> 假设现在输入“1 X Y”，我们会发现以XA和YA是否在一条链上作为判断依据，会导致第二种情况判断错误。因此我们从反面判断：如果XA与YB或YC相连，则新输入的关系是错误的。</li></ul><ol><li>输入是“2 X Y”</li></ol><ul><li>同上，从反面考虑：如果XA与YA或YC相连，那么新输入的关系是错的，反之正确。</li></ul></li><li><p><strong>增添关系</strong></p><ul><li>“1 X Y”：连XA与YA, XB与YB，XC与YC</li><li>“2 X Y”：连XA与YB, XB与YC，XC与YA</li></ul></li><li><p><strong>代码实现</strong></p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span>;</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; <span class="built_in">pa</span>(<span class="number">3</span>*N<span class="number">+10</span>);   <span class="comment">//记得开三倍大小的数组</span></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pa[x] == x ? x : pa[x] = <span class="built_in">find</span>(pa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    pa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; i++)&#123;</span><br><span class="line">        pa[i] = i;     <span class="comment">//一开始无关系，都是根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">        <span class="type">int</span> op, x, y;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; n || y &gt; n)&#123;    <span class="comment">//超出动物的编号，关系也是错误的</span></span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;    <span class="comment">//&quot;输入为1 X Y&quot;</span></span><br><span class="line">            <span class="comment">//如果XA与YB或YC相连，则关系错误</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y + n) || <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y<span class="number">+2</span>*n))&#123;   </span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;     <span class="comment">//否则在关系链上增添X与Y同类的关系</span></span><br><span class="line">                <span class="built_in">merge</span>(x, y);                    <span class="comment">//连XA与YA</span></span><br><span class="line">                <span class="built_in">merge</span>(x + n, y + n);            <span class="comment">//连XB与YB</span></span><br><span class="line">                <span class="built_in">merge</span>(x + <span class="number">2</span> * n, y + <span class="number">2</span> * n);    <span class="comment">//连XC与YC</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;    <span class="comment">//&quot;输入为2 X Y&quot;</span></span><br><span class="line">            <span class="comment">//如果XA与YA或YC相连，则关系错误</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y) || <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y<span class="number">+2</span>*n))&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;      <span class="comment">//增添X捕食Y的关系</span></span><br><span class="line">                <span class="built_in">merge</span>(x, y + n);                <span class="comment">//连XA与YB</span></span><br><span class="line">                <span class="built_in">merge</span>(x + n, y + <span class="number">2</span>*n);          <span class="comment">//连XB与YC</span></span><br><span class="line">                <span class="built_in">merge</span>(x + <span class="number">2</span> * n, y);            <span class="comment">//连XC与YA</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="三、做题总结"><a href="#三、做题总结" class="headerlink" title="三、做题总结"></a>三、做题总结</h2><p>经过此题的启发，我设想了一些推广，不过很多情况下不会有本题这么好的条件。此题之所以能用这种方法，是因为所有可能出现的关系都是基于A -&gt; B -&gt; C -&gt; A的核心关系，并且种类个数是一个定值。而大多数并查集的题目种类数都不固定，因此这种方法泛用性较差。不过能想到这么做的人肯定是个天才👍</p><h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>这是本蒟蒻第一次写完整的题解，若有不当还请谅解，之后争取不断进步。把思路记录下来主要还是便于自己回顾，部署到网站上是希望能够帮助一些一起学习的伙伴。（<del>误人子弟了怎么办</del>）</p>]]></content>
      
      
      <categories>
          
          <category> ACM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2025/09/09/hello-world/"/>
      <url>/2025/09/09/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
