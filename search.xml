<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>关系链上的并查集</title>
    <url>/2025/09/11/%E5%85%B3%E7%B3%BB%E9%93%BE%E4%B8%8A%E7%9A%84%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    <content><![CDATA[<h2 id="一、题目引入"><a href="#一、题目引入" class="headerlink" title="一、题目引入"></a>一、题目引入</h2><p>最近做了一道很优美的使用并查集解决的问题：<a href="https://ac.nowcoder.com/acm/problem/16884">https://ac.nowcoder.com/acm/problem/16884</a> 【2001NOI 食物链】</p>
<p>简要概括就是一共有A、B、C三种动物。A吃B，B吃C，C吃A。动物间有两种关系：</p>
<ul>
<li>“1 X Y”，表示X和Y是同类</li>
<li>“2 X Y”，表示X吃Y。</li>
</ul>
<p>现在给出k个关系，问这些关系中哪些是假的（与已有的关系冲突）</p>
<hr>
<p>这是一道很经典的并查集问题，但是与一般的并查集题目不同的是，此题的集合可以选择构建一串逻辑自洽的关系链。</p>
<span id="more"></span>

<p>在解决这道题目之前，先来回顾一下两种基本的并查集操作：</p>
<ol>
<li>合并：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    pa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);  <span class="comment">//pa数组存储父亲节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>查询（+路径压缩）：<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pa[x] == x ? x : pa[x] = <span class="built_in">find</span>(pa[x]); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、解题思路</h2><p>此题可以用带权并查集解决，两点之间的距离代表着两者关系。经过三条边即一个A -&gt; B -&gt; C -&gt; A的循环，相当于是属于同一个物种。不过本蒟蒻并不是很会带权并查集，一开始用这个方法一直没做对这道题（🍐）。后来看了题解发现一个让我眼前一亮的做法，遂记录在此。</p>
<hr>
<p>正篇：</p>
<ol>
<li><p><strong>思路大意</strong></p>
<ul>
<li><p>将原先存储父亲节点的pa数组开三倍大。a[1]——a[n] 表示 i 为A动物的情况，a[n+1]——a[2n] 表示 i 为B动物的情况， a[2n+1]——a[3n] 表示 i 为C动物的情况。</p>
<table>
<thead>
<tr>
<th>i</th>
<th>1</th>
<th>2</th>
<th>3</th>
<th>……</th>
<th>n</th>
</tr>
</thead>
<tbody><tr>
<td>A</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>B</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>C</td>
<td></td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>这样 i 对应的一竖列元素可以看作 i 号分别是A、B、C动物时的父亲节点（根节点的父亲就是自己）</p>
</li>
<li><p>由于有三个物种，第i个动物可能是A、B、C中任意一种（后续我们分别用iA，iB，iC表示）。在构建关系链的时候三种情况都要考虑，因此A、B、C都会延伸出一条链，一共三条链。若把多个竖列的三种情况都连接起来，那么这三条链记录着目前三种可能的关系链。每条关系链维护的是不同编号的动物之间的关系。</p>
</li>
<li><p><mark>举例</mark>用“–”表示逻辑上相连，XA–YA，XB–YB，XC–YC代表X与Y属于同类。XA–YB，XB–YC，XC–YA代表X吃Y。</p>
</li>
</ul>
</li>
<li><p><strong>如何判断一个关系的正确性？</strong></p>
<ol>
<li>输入是“1 X Y”</li>
</ol>
<ul>
<li>如果X和Y已经有关系了，那么XA肯定会与YA、YB或YC中的一个相连。<br>（由于每次构建关系链的时候我们是三种情况（XA、XB、XC）都考虑的，因此只用考虑XA就行）</li>
<li>如果X和Y没有关系，则XA不会与YA、YB或YC中任意一个相连。这时候新输入的关系肯定是正确的<br> 假设现在输入“1 X Y”，我们会发现以XA和YA是否在一条链上作为判断依据，会导致第二种情况判断错误。因此我们从反面判断：如果XA与YB或YC相连，则新输入的关系是错误的。</li>
</ul>
<ol>
<li>输入是“2 X Y”</li>
</ol>
<ul>
<li>同上，从反面考虑：如果XA与YA或YC相连，那么新输入的关系是错的，反之正确。</li>
</ul>
</li>
<li><p><strong>增添关系</strong></p>
<ul>
<li>“1 X Y”：连XA与YA, XB与YB，XC与YC</li>
<li>“2 X Y”：连XA与YB, XB与YC，XC与YA</li>
</ul>
</li>
<li><p><strong>代码实现</strong></p>
 <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e4</span>;</span><br><span class="line">vector &lt;<span class="type">int</span>&gt; <span class="built_in">pa</span>(<span class="number">3</span>*N<span class="number">+10</span>);   <span class="comment">//记得开三倍大小的数组</span></span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pa[x] == x ? x : pa[x] = <span class="built_in">find</span>(pa[x]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">    pa[<span class="built_in">find</span>(x)] = <span class="built_in">find</span>(y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="type">int</span> n, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">3</span> * n; i++)&#123;</span><br><span class="line">        pa[i] = i;     <span class="comment">//一开始无关系，都是根节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= k; i++)&#123;</span><br><span class="line">        <span class="type">int</span> op, x, y;</span><br><span class="line">        cin &gt;&gt; op &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span>(x &gt; n || y &gt; n)&#123;    <span class="comment">//超出动物的编号，关系也是错误的</span></span><br><span class="line">            cnt++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>)&#123;    <span class="comment">//&quot;输入为1 X Y&quot;</span></span><br><span class="line">            <span class="comment">//如果XA与YB或YC相连，则关系错误</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y + n) || <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y<span class="number">+2</span>*n))&#123;   </span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;     <span class="comment">//否则在关系链上增添X与Y同类的关系</span></span><br><span class="line">                <span class="built_in">merge</span>(x, y);                    <span class="comment">//连XA与YA</span></span><br><span class="line">                <span class="built_in">merge</span>(x + n, y + n);            <span class="comment">//连XB与YB</span></span><br><span class="line">                <span class="built_in">merge</span>(x + <span class="number">2</span> * n, y + <span class="number">2</span> * n);    <span class="comment">//连XC与YC</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;    <span class="comment">//&quot;输入为2 X Y&quot;</span></span><br><span class="line">            <span class="comment">//如果XA与YA或YC相连，则关系错误</span></span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x) == <span class="built_in">find</span>(y) || <span class="built_in">find</span>(x) == <span class="built_in">find</span>(y<span class="number">+2</span>*n))&#123;</span><br><span class="line">                cnt++;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;      <span class="comment">//增添X捕食Y的关系</span></span><br><span class="line">                <span class="built_in">merge</span>(x, y + n);                <span class="comment">//连XA与YB</span></span><br><span class="line">                <span class="built_in">merge</span>(x + n, y + <span class="number">2</span>*n);          <span class="comment">//连XB与YC</span></span><br><span class="line">                <span class="built_in">merge</span>(x + <span class="number">2</span> * n, y);            <span class="comment">//连XC与YA</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; cnt &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="三、做题总结"><a href="#三、做题总结" class="headerlink" title="三、做题总结"></a>三、做题总结</h2><p>经过此题的启发，我设想了一些推广，不过很多情况下不会有本题这么好的条件。此题之所以能用这种方法，是因为所有可能出现的关系都是基于A -&gt; B -&gt; C -&gt; A的核心关系，并且种类个数是一个定值。而大多数并查集的题目种类数都不固定，因此这种方法泛用性较差。不过能想到这么做的人肯定是个天才👍</p>
<h4 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h4><p>这是本蒟蒻第一次写完整的题解，若有不当还请谅解，之后争取不断进步。把思路记录下来主要还是便于自己回顾，部署到网站上是希望能够帮助一些一起学习的伙伴。（<del>误人子弟了怎么办</del>）</p>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>并查集</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/09/09/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>基于数据矛盾性的暴力优化</title>
    <url>/2025/09/20/%E5%9F%BA%E4%BA%8E%E6%95%B0%E6%8D%AE%E7%9F%9B%E7%9B%BE%E6%80%A7%E7%9A%84%E6%9A%B4%E5%8A%9B%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<h2 id="一、题目引入"><a href="#一、题目引入" class="headerlink" title="一、题目引入"></a>一、题目引入</h2><p>前情提要：今天打了ccpc的网络赛，最后大败而归。😭😭😭<br>让我绝望的是到最后G题一直TLE，赛后发现自己的做法缺少了一个关键的细节。于是写博客记录一下此题及其使用的思想。</p>
<p>题目：<a href="https://qoj.ac/contest/2534/problem/14553">G 序列与整数对</a></p>
<p>题目大意：有一个长度为n的序列A，q次询问，每次询问给出两个整数&lt;x,y&gt;，问A中存在多少个&lt;x,y&gt;。<br>数据范围：$1 &lt;&#x3D; n,q &lt;&#x3D; 10^5， 1 &lt;&#x3D; x,y &lt;&#x3D; 10^9$。</p>
<span id="more"></span>

<h2 id="二、解题思路"><a href="#二、解题思路" class="headerlink" title="二、解题思路"></a>二、<strong>解题思路</strong></h2><p><strong>1.赛时思路</strong></p>
<ul>
<li><p>初始思路（暴力）<br>一开始想到的是先暴力枚举。在遍历{$a_i$}时，记录下ai出现的位置，存储在一个数组中。然后在输入x,y后，遍历x的位置数组，找在当前x位置后第一次出现的y的位置，即可算出有多少对${x,y}$。<br>简单分析一下时间复杂度。频度最大的操作是每次查询中遍历x的位置数组 + 查询满足条件的y。这里查找肯定用二分，因此时间复杂度为$O(qn\log{n})$，显然会超时。</p>
</li>
<li><p>暴力基础上的优化思路<br>我们发现导致超时的数据有以下特征：<br>{$a_i$}中的数字种类单一，每个数字出现了很多次，因此x的位置数组很大，每次查询操作中，基本上都是 $O(n\log{n})$级别的。不过好消息是有效查询减少了（定义有效查询为x和y均在数组中出现过且$x \neq y$）。</p>
<p>  相反，若{$a_i$}中的数字离散程度较大，每个数字出现次数少，那么每次查询中，遍历完位置数组只有常数级别复杂度。</p>
<p>  针对第一种情况的数据，我们做了<mark>记忆化</mark>处理。把${x, y}$对应的答案存储下来，在下次出现的时候直接输出即可。如此，可以大大降低时间复杂度，大概为$O(\frac{q}{c}n\log{n})$（这里c是个常数，在不同数据中会有变化）</p>
</li>
</ul>
<p><strong>2.赛后的思路优化</strong></p>
<ul>
<li><p>上一步优化了时间复杂度，实际上在较坏的情况下常数c可能很小，导致优化效果并不好，举个例子：<br>$n &#x3D; q &#x3D; 10^5$的时候，我给5e4个1，剩下5e4个数都不一样<br>若接下来的5e4次查询中，x都是1，y都不一样，那么每次查询还是要把x的位置序列都遍历一遍，即使二分查找的时间复杂度完全可以忽略不计，但总共有5e4*5e4次操作，依然超时。<br>问题很明显，<mark>我们应该选择x和y中出现次数少的来遍历</mark>，防止遍历复杂度过高。</p>
</li>
<li><p>分析时间复杂度<br>首先列一张表，拆解时间复杂度$O(qn\log{n})$的组成部分</p>
<table>
<thead>
<tr>
<th align="center">组成部分</th>
<th align="center">代表含义</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$q$</td>
<td align="center">有效查询次数$Q&lt;q$</td>
</tr>
<tr>
<td align="center">$n$</td>
<td align="center">一次查询中遍历某个数出现位置的时间复杂度$t_1&lt;n$</td>
</tr>
<tr>
<td align="center">$logn$</td>
<td align="center">二分查找另一个数位置的时间复杂度$t_2&lt;logn≈10$</td>
</tr>
</tbody></table>
<p>  所以在估计数量级之前的复杂度为$O(Qt_1t_2)$。事实上$Q,t1,t2$不可能同时取到最大值，三者是相互制约的。<br>  假设$n$个数中共有$m$个不同的数，每个数的出现次数从小到大排列为$b_1,b_2,b_3……,b_m$。易知$\sum_{i&#x3D;1}^{m}b_i &#x3D; n$，$Q$最大可以取到$A_{m}^{2}$，而且不会超过$q$，即$Q&#x3D;min(A_{m}^{2},q)$。</p>
<p>  <strong>①</strong> $m &lt; \sqrt{q}$</p>
<p>  最坏情况下，我们需要把所有可能的${ b_i,b_j}$都暴力计算一遍，即$Q &#x3D; A_m^2$。对于每一对${ b_i,b_j}$，我们都要遍历其中出现次数少的数的位置。由此可得总时间复杂度为$O(\sum_{i&#x3D;1}^{m}b_i(m-i)log{b_j})&lt;O(mlogb_j·\sum_{i&#x3D;1}^{m}b_i)&lt;O(n\sqrt{q}logn)$</p>
<p>  <strong>②</strong> $m &gt; \sqrt{q}$</p>
<p>  对于一个出现次数为$b_i$的数$x$，如果需要遍历其位置，则另一个数$y$的出现次数$b_j&gt;b_i$。而这样的$y$不会超过$\frac{n}{b_i}$个，因此遍历$x$位置的次数不会超过$\frac{n}{b_i}$。</p>
<p>  最坏情况下，$Q &#x3D; q$。假设出现次数$b_i &gt; \sqrt{q}$的数有$k$个，易知$k≤\frac{n}{\sqrt{q}}$，将这些数挑出来可以组成$A_k^2 ≈ k^2$个有序对。最坏情况下这$k^2$个有序对均会被查询，出现$b_i$次的数会被查询$\frac{n}{b_i}$次，时间复杂度大约为$O(\sum{b_i\frac{n}{b_i}logb_j}) &lt; O(nklogn)$。</p>
<p>  剩下的$q-k^2$次查询的时间复杂度不超过$O((q-k^2)\sqrt{q}logn)$。总时间复杂度约为$O((\sqrt{q}k^2+nk-q\sqrt{q})logn)&lt;O((\frac{2n^2}{\sqrt{q}}-q\sqrt{q})logn)$</p>
<p>  注：对于$n&#x3D;q&#x3D;10^5$的最大数据，时间复杂度也可以化简$O(n\sqrt{q}logn)$</p>
</li>
</ul>
<hr>
<p>经过分析，两种情况均不会超时</p>
<p>最终版代码提交过后成功AC。AC代码如下：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, q;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//freopen(&quot;test2.in&quot;, &quot;r&quot;, stdin);</span></span><br><span class="line">    <span class="comment">//freopen(&quot;test2.out&quot;, &quot;w&quot;, stdout);</span></span><br><span class="line">    cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">    vector &lt;<span class="type">int</span>&gt; <span class="built_in">a</span>(n);</span><br><span class="line">    map &lt;<span class="type">int</span>, vector&lt;<span class="type">int</span>&gt;&gt; mp;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        cin &gt;&gt; a[i];</span><br><span class="line">        mp[a[i]].<span class="built_in">push_back</span>(i);      <span class="comment">//记录a[i]的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    map &lt;pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;, <span class="type">long</span> <span class="type">long</span>&gt; ans;    <span class="comment">//记得开long long</span></span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">        <span class="type">int</span> x, y;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; p = &#123;x, y&#125;;</span><br><span class="line">        <span class="keyword">if</span>(ans.<span class="built_in">count</span>(p))&#123;       <span class="comment">//记忆化</span></span><br><span class="line">            cout &lt;&lt; ans[p] &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> &amp;mpx = mp[x];</span><br><span class="line">        <span class="keyword">auto</span> &amp;mpy = mp[y];</span><br><span class="line">        <span class="comment">//记得开longlong，否则接下来的乘法运算中会爆int</span></span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> xl = mpx.<span class="built_in">size</span>(), yl = mpy.<span class="built_in">size</span>();   </span><br><span class="line">        <span class="keyword">if</span>(x == y)&#123;       <span class="comment">//这里需要特判一下x = y的情况！！！</span></span><br><span class="line">            cout &lt;&lt; xl * (xl<span class="number">-1</span>) / <span class="number">2</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">long</span> <span class="type">long</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(xl &lt; yl)&#123;        <span class="comment">//选择出现次数少的遍历</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> x : mpx)&#123;</span><br><span class="line">                cnt += yl - (<span class="built_in">lower_bound</span>(mpy.<span class="built_in">begin</span>(), mpy.<span class="built_in">end</span>(), x) - mpy.<span class="built_in">begin</span>());</span><br><span class="line">            &#125;</span><br><span class="line">            ans[p] = cnt;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> y : mpy)&#123;</span><br><span class="line">                cnt += <span class="built_in">lower_bound</span>(mpx.<span class="built_in">begin</span>(), mpx.<span class="built_in">end</span>(), y) - mpx.<span class="built_in">begin</span>();</span><br><span class="line">                <span class="comment">//注意：两种情况计算方法不一样</span></span><br><span class="line">            &#125;</span><br><span class="line">            ans[p] = cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        ans[p] = cnt;       <span class="comment">//记忆化</span></span><br><span class="line">        cout &lt;&lt; cnt &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;    </span><br></pre></td></tr></table></figure>

<h2 id="三、做题总结"><a href="#三、做题总结" class="headerlink" title="三、做题总结"></a>三、做题总结</h2><p>本题的暴力优化关键在于<mark>寻找数据中的矛盾点</mark>——有效查询次数与位置数组大小，两者只能一大一小。而我们原本的暴力方法不怕有效查询次数多，位置数组小。因此我们只需找出一个针对有效查询次数少，但位置数组大的解决方案——记忆化。</p>
<p>其实这种思想很像<mark>根号分治</mark>。根号分治是一种在处理数据规模较大的问题时，利用不同算法来平衡复杂度的思想。它的核心在于将问题分为两类：对于小规模数据，采用暴力算法；而对于大规模数据，则使用更高效的算法，一般数据的临界点选择在$\sqrt{n}$左右。本题中我们全部采用暴力+记忆化的方法也能过，因此没有再具体细分数据类型。</p>
<p>接下来反思一下为什么在比赛中没能做出这题。其实早在A题我就犯了同样的错误：在造样例时没有考虑全所有的极端样例。因此A题多吃了两发罚时😭😭😭。A题中，我只考虑了棋盘是偏正方形的情况（比如600×600），没考虑一长条的情况（比如1×100000）。本题我在造数据的时候，只考虑了特别离散和特别密集的数据，却没有考虑到可以一半离散，一半密集。要是正式赛就要因为一个细节的疏忽而遗憾打铁了。</p>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>记忆化</tag>
        <tag>暴力优化</tag>
      </tags>
  </entry>
</search>
